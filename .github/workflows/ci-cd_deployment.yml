name: Packer image build and deploy
on:
  push:
    branches:
      - main

jobs:
  build_ami:
    name: Build and deploy Custom AMI
    environment: dev
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Reading secrets and env vars
        run: echo "DB_URL=${{ secrets.DB_URL }} DB_USERNAME=${{ secrets.DB_USERNAME }} DB_PASSWORD=${{ secrets.DB_PASSWORD }}, JAR_NAME=${{ env.JAR_NAME }}"

      - name: Run with Maven
        working-directory: ./CloudDemo_CSYE_6225
        run: mvn clean package -DfinalName=${{ vars.JAR_NAME }}
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DB_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          LOG_FILE_NAME: ${{ vars.LOG_FILE_NAME }}
          S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
          SNS_MAIL_TOPIC_ARN: test
          APPLICATION_BASE_URL: ${{ vars.APPLICATION_BASE_URL }}
          EMAIL_EXPIRY_MIN: ${{ vars.EMAIL_EXPIRY_MIN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Set up Packer
        uses: hashicorp/setup-packer@v3

      - name: Init Packer
        working-directory: ./packer
        run: packer init .

      - name: Check the secrets
        run: echo "DB_URL=${{ secrets.DB_URL }} DB_NAME=${{ secrets.DB_NAME }} DB_USERNAME=${{ secrets.DB_USERNAME }} DB_PASSWORD=${{ secrets.DB_PASSWORD }}"

      - name: Packer Validate
        working-directory: ./packer
        run: |
          packer validate .

      - name: Build Custom AMI with Packer
        working-directory: ./packer
        run: |
          packer build \
          -var 'aws_region=${{ vars.AWS_REGION }}' \
          -var 'ami_users=${{ vars.AWS_ACCOUNT_DEMO_ID }}' \
          -var 'source_ami=${{ vars.SOURCE_AMI }}' \
          -var 'subnet_id=${{ vars.SUBNET_ID }}' \
          -var 'environment=${{ vars.ENVIRONMENT_NAME }}' \
          -var 'ARTIFACT_NAME=${{ vars.JAR_NAME }}' .
  
  extract_ami_id:
    name: Extract AMI ID
    runs-on: ubuntu-latest
    needs: build_ami
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract AMI ID from manifest.json
        run: |
          AMI_ID=$(jq -r '.builds[-1].artifact_id' ./packer/manifest.json | cut -d ":" -f2)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

  get_launch_template_id:
    name: Get Launch Template ID
    runs-on: ubuntu-latest
    needs: extract_ami_id
    steps:
      - name: Get Launch Template ID
        run: |
          LT_ID=$(aws ec2 describe-launch-templates --launch-template-name ${{ vars.Launch_Template }} | jq '.LaunchTemplates[].LaunchTemplateId')
          LT_ID="${LT_ID%\"}"
          LT_ID="${LT_ID#\"}"
          echo "LT_ID=$LT_ID" >> $GITHUB_ENV

  update_asg:
    name: Update ASG with New AMI
    runs-on: ubuntu-latest
    needs: get_launch_template_id
    steps:
      - name: Create a new version of the Launch Template
        run: |
          aws ec2 create-launch-template-version \
          --launch-template-id $LT_ID \
          --version-description "New version with updated AMI" \
          --source-version 1 \
          --launch-template-data "{\"ImageId\":\"$AMI_ID\"}"

      - name: Update ASG to use the new Launch Template version
        run: |
          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name ${{ vars.ASG_NAME }} \
          --launch-template "LaunchTemplateId=$LT_ID,Version=\$Latest" \
          --strategy Rolling

      - name: Start an instance refresh
        run: |
          aws autoscaling start-instance-refresh \
          --auto-scaling-group-name ${{ vars.ASG_NAME }} \
          --preferences "{\"MinHealthyPercentage\":75}

      - name: Wait for Instance Refresh to Complete
        run: |
          aws autoscaling describe-instance-refreshes \
          --auto-scaling-group-name ${{ vars.ASG_NAME }} \
          --instance-refresh-ids $(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${{ vars.ASG_NAME }} | jq -r '.AutoScalingGroups[].LatestInstanceRefreshId') \
          --query 'InstanceRefreshes[].Status' \
          --output text
      