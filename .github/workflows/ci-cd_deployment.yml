name: Packer image build and deploy
on:
  push:
    branches:
      - main

jobs:
  build_ami:
    name: Build and deploy Custom AMI
    environment: dev
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    outputs:
      PACKER_IMAGE_ID: ${{ steps.extract_ami_id.outputs.PACKER_BUILD_IMAGE_ID }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Reading secrets and env vars
        run: echo "DB_URL=${{ secrets.DB_URL }} DB_USERNAME=${{ secrets.DB_USERNAME }} DB_PASSWORD=${{ secrets.DB_PASSWORD }}"

      - name: Run with Maven
        working-directory: ./CloudDemo_CSYE_6225
        run: mvn clean package -DfinalName=${{ vars.JAR_NAME }}
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DB_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          LOG_FILE_NAME: ${{ vars.LOG_FILE_NAME }}
          S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
          SNS_MAIL_TOPIC_ARN: test
          APPLICATION_BASE_URL: ${{ vars.APPLICATION_BASE_URL }}
          EMAIL_EXPIRY_MIN: ${{ vars.EMAIL_EXPIRY_MIN }}
          SECRET_NAME: ${{ vars.SECRET_NAME }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Set up Packer
        uses: hashicorp/setup-packer@v3

      - name: Init Packer
        working-directory: ./packer
        run: packer init .

      - name: Packer Validate
        working-directory: ./packer
        run: |
          packer validate .

      - name: Build Custom AMI with Packer
        working-directory: ./packer
        run: |
          packer build \
          -var 'aws_region=${{ vars.AWS_REGION }}' \
          -var 'ami_users=${{ vars.AWS_ACCOUNT_DEMO_ID }}' \
          -var 'source_ami=${{ vars.SOURCE_AMI }}' \
          -var 'subnet_id=${{ vars.SUBNET_ID }}' \
          -var 'environment=${{ vars.ENVIRONMENT_NAME }}' \
          -var 'ARTIFACT_NAME=${{ vars.JAR_NAME }}' .

      - name: Extract AMI ID from manifest.json
        id: extract_ami_id
        working-directory: ./packer
        run: |
          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo "AMI_ID=$AMI_ID"
          echo "PACKER_BUILD_IMAGE_ID=$AMI_ID" >> $GITHUB_OUTPUT

  get_launch_template_id:
    name: Get Launch Template ID
    environment: dev
    runs-on: ubuntu-latest
    outputs:
      Launch_Template_ID: ${{ steps.get_lt_id.outputs.LT_ID }}
    needs: build_ami
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Get Launch Template ID
        id: get_lt_id
        run: |
          LT_ID=$(aws ec2 describe-launch-templates \
          --launch-template-name ${{ vars.Launch_Template }} \
          | jq '.LaunchTemplates[].LaunchTemplateId')
          echo "Initial LT_ID=$LT_ID"
          LT_ID="${LT_ID%\"}"
          LT_ID="${LT_ID#\"}"
          echo "After processing LT_ID=$LT_ID"
          echo "LT_ID=$LT_ID" >> $GITHUB_OUTPUT

  create_launch_template_version:
    name: Create New Launch Template Version
    runs-on: ubuntu-latest
    environment: dev
    needs: [get_launch_template_id,build_ami]
    if: ${{ needs.get_launch_template_id.outputs.Launch_Template_ID != '' }}
    outputs:
      launch_template_version: ${{ steps.create_new_version.outputs.TEMPLATE_VERSION }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Get Latest Version Number
        id: get_latest_version
        run: |
          LATEST_VERSION=$(aws ec2 describe-launch-templates \
            --launch-template-id ${{ needs.get_launch_template_id.outputs.Launch_Template_ID }} \
            --query 'LaunchTemplates[0].LatestVersionNumber' \
            --output text)
          echo "Last_VERSION=$LATEST_VERSION"
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Create a New Version of the Launch Template
        id: create_new_version
        run: |
          TEMPLATE_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ needs.get_launch_template_id.outputs.Launch_Template_ID }} \
            --version-description "New version with updated AMI" \
            --source-version $LATEST_VERSION \
            --launch-template-data "{\"ImageId\":\"${{ needs.build_ami.outputs.PACKER_IMAGE_ID }}\"}" \
            | jq -r '.LaunchTemplateVersion.VersionNumber')
          echo "New TEMPLATE_VERSION=$TEMPLATE_VERSION"
          echo "TEMPLATE_VERSION=$TEMPLATE_VERSION" >> $GITHUB_OUTPUT

  update_asg_with_new_version:
    name: Update ASG with New Launch Template Version
    environment: dev
    runs-on: ubuntu-latest
    needs: [get_launch_template_id,create_launch_template_version]
    if: ${{ needs.create_launch_template_version.outputs.launch_template_version != '' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Update ASG to use the new Launch Template version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ vars.ASG_NAME }} \
            --launch-template "LaunchTemplateId=${{needs.get_launch_template_id.outputs.Launch_Template_ID}},Version=${{ needs.create_launch_template_version.outputs.launch_template_version }}"

  start_instance_refresh:
    name: Start Instance Refresh
    environment: dev
    runs-on: ubuntu-latest
    needs: update_asg_with_new_version
    outputs:
      InstanceRefreshId: ${{ steps.start_refresh.outputs.InstanceRefreshId }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Start an instance refresh
        id: start_refresh
        run: |
          InstanceRefreshId=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ vars.ASG_NAME }} \
            --strategy Rolling \
            | jq -r '.InstanceRefreshId')
          echo "InstanceRefreshId=$InstanceRefreshId"
          echo "InstanceRefreshId=$InstanceRefreshId" >> $GITHUB_OUTPUT

  wait_for_refresh_completion:
    name: Wait for Instance Refresh to Complete
    environment: dev
    runs-on: ubuntu-latest
    needs: start_instance_refresh
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
          
      - name: Wait for Instance Refresh to Complete
        run: |
          ASG_NAME=${{ vars.ASG_NAME }}
          INSTANCE_REFRESH_ID=${{ needs.start_instance_refresh.outputs.InstanceRefreshId }}
          
          # Polling the status of the instance refresh
          STATUS="InProgress"
          while [ "$STATUS" == "InProgress" ]; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "$ASG_NAME" \
              --instance-refresh-ids "$INSTANCE_REFRESH_ID" \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            echo "Current status: $STATUS"
            
            if [ "$STATUS" == "InProgress" ]; then
              sleep 30  # Wait for 30 seconds before checking again
            fi
          done
          
          # Check the final status
          if [ "$STATUS" == "Successful" ]; then
            echo "Instance refresh completed successfully."
            exit 0
          else
            echo "Instance refresh failed with status: $STATUS"
            exit 1
          fi

  get_launch_template_id_demo:
    name: Get Launch Template ID Demo
    environment: demo
    runs-on: ubuntu-latest
    outputs:
      Launch_Template_ID: ${{ steps.get_lt_id.outputs.LT_ID }}
    needs: build_ami
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Get Launch Template ID
        id: get_lt_id
        run: |
          LT_ID=$(aws ec2 describe-launch-templates \
          --launch-template-name ${{ vars.Launch_Template }} \
          | jq '.LaunchTemplates[].LaunchTemplateId')
          echo "Initial LT_ID=$LT_ID"
          LT_ID="${LT_ID%\"}"
          LT_ID="${LT_ID#\"}"
          echo "After processing LT_ID=$LT_ID"
          echo "LT_ID=$LT_ID" >> $GITHUB_OUTPUT

  create_launch_template_version_demo:
    name: Create New Launch Template Version Demo
    runs-on: ubuntu-latest
    environment: demo
    needs: [get_launch_template_id_demo,build_ami]
    if: ${{ needs.get_launch_template_id_demo.outputs.Launch_Template_ID != '' }}
    outputs:
      launch_template_version: ${{ steps.create_new_version.outputs.TEMPLATE_VERSION }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Get Latest Version Number
        id: get_latest_version
        run: |
          LATEST_VERSION=$(aws ec2 describe-launch-templates \
            --launch-template-id ${{ needs.get_launch_template_id_demo.outputs.Launch_Template_ID }} \
            --query 'LaunchTemplates[0].LatestVersionNumber' \
            --output text)
          echo "Last_VERSION=$LATEST_VERSION"
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Create a New Version of the Launch Template
        id: create_new_version
        run: |
          TEMPLATE_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ needs.get_launch_template_id_demo.outputs.Launch_Template_ID }} \
            --version-description "New version with updated AMI" \
            --source-version $LATEST_VERSION \
            --launch-template-data "{\"ImageId\":\"${{ needs.build_ami.outputs.PACKER_IMAGE_ID }}\"}" \
            | jq -r '.LaunchTemplateVersion.VersionNumber')
          echo "New TEMPLATE_VERSION=$TEMPLATE_VERSION"
          echo "TEMPLATE_VERSION=$TEMPLATE_VERSION" >> $GITHUB_OUTPUT

  update_asg_with_new_version_demo:
    name: Update ASG with New Launch Template Version Demo
    environment: demo
    runs-on: ubuntu-latest
    needs: [get_launch_template_id_demo,create_launch_template_version_demo]
    if: ${{ needs.create_launch_template_version_demo.outputs.launch_template_version != '' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Update ASG to use the new Launch Template version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ vars.ASG_NAME }} \
            --launch-template "LaunchTemplateId=${{needs.get_launch_template_id_demo.outputs.Launch_Template_ID}},Version=${{ needs.create_launch_template_version_demo.outputs.launch_template_version }}"

  start_instance_refresh_demo:
    name: Start Instance Refresh Demo
    environment: demo
    runs-on: ubuntu-latest
    needs: update_asg_with_new_version_demo
    outputs:
      InstanceRefreshId: ${{ steps.start_refresh.outputs.InstanceRefreshId }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Start an instance refresh
        id: start_refresh
        run: |
          InstanceRefreshId=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ vars.ASG_NAME }} \
            --strategy Rolling \
            | jq -r '.InstanceRefreshId')
          echo "InstanceRefreshId=$InstanceRefreshId"
          echo "InstanceRefreshId=$InstanceRefreshId" >> $GITHUB_OUTPUT

  wait_for_refresh_completion_demo:
    name: Wait for Instance Refresh to Complete Demo
    environment: demo
    runs-on: ubuntu-latest
    needs: start_instance_refresh_demo
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"
          
      - name: Wait for Instance Refresh to Complete
        run: |
          ASG_NAME=${{ vars.ASG_NAME }}
          INSTANCE_REFRESH_ID=${{ needs.start_instance_refresh_demo.outputs.InstanceRefreshId }}
          
          # Polling the status of the instance refresh
          STATUS="InProgress"
          while [ "$STATUS" == "InProgress" ]; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "$ASG_NAME" \
              --instance-refresh-ids "$INSTANCE_REFRESH_ID" \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            echo "Current status: $STATUS"
            
            if [ "$STATUS" == "InProgress" ]; then
              sleep 30  # Wait for 30 seconds before checking again
            fi
          done
          
          # Check the final status
          if [ "$STATUS" == "Successful" ]; then
            echo "Instance refresh completed successfully."
            exit 0
          else
            echo "Instance refresh failed with status: $STATUS"
            exit 1
          fi
