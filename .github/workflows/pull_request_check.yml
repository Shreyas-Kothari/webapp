name: Pull request check for webapp repo
on:
  pull_request:
    branches:
      - main
jobs:
  build_test_java_app:
    name: Build and Test Java application
    environment: dev
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_USER: ${{ secrets.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Reading secrets and env vars
        run: echo "DB_URL=${{ secrets.DB_URL }} DB_USERNAME=${{ secrets.DB_USERNAME }} DB_PASSWORD=${{ secrets.DB_PASSWORD }}, JAR_NAME_vars=${{ vars.JAR_NAME }}"

      - name: Run with Maven
        working-directory: ./CloudDemo_CSYE_6225
        run: mvn clean package -DfinalName=${{ vars.JAR_NAME }}
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DB_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          LOG_FILE_NAME: ${{ vars.LOG_FILE_NAME }}
          S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
          SNS_MAIL_TOPIC_ARN: test
          APPLICATION_BASE_URL: ${{ vars.APPLICATION_BASE_URL }}
          EMAIL_EXPIRY_MIN: ${{ vars.EMAIL_EXPIRY_MIN }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@v3

      - name: Init Packer
        working-directory: ./packer
        run: packer init .

      - name: Packer fmt check
        working-directory: ./packer
        run: packer fmt -check -recursive .

      - name: Validate Packer template
        working-directory: ./packer
        run: |
          packer validate \
          -var 'aws_region=${{ vars.AWS_REGION }}' \
          -var 'ami_users=${{ vars.AWS_ACCOUNT_DEMO_ID }}' \
          -var 'source_ami=${{ vars.SOURCE_AMI }}' \
          -var 'subnet_id=${{ vars.SUBNET_ID }}' \
          -var 'environment=${{ vars.ENVIRONMENT_NAME }}' \
          -var 'ARTIFACT_NAME=${{ vars.JAR_NAME }}' .
